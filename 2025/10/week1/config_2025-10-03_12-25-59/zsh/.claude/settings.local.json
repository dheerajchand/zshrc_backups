{
  "env": {
    "ZSH_SYSTEM_PREFERENCE": "siege_analytics_only",
    "CLAUDE_ZSH_CONTEXT": "Use ONLY Siege Analytics ZSH system at /Users/dheerajchand/.config/zsh/ - NEVER use atomantic dotfiles at ~/.dotfiles/",
    "ZSH_COMMIT_METHOD": "backup_system_only",
    "ATOMANTIC_FORBIDDEN": "NEVER edit or reference ~/.dotfiles/ or any atomantic files. Always use ~/.config/zsh/ Siege Analytics system.",
    "ZSHRC_IS_SYMLINK": "~/.zshrc is a symlink to ~/.config/zsh/zshrc - do not modify the symlink, edit the target file",
    "OH_MY_ZSH_PATH": "~/.config/zsh/oh-my-zsh (Siege Analytics controlled, not ~/.dotfiles/oh-my-zsh)",
    "DEBUGGING_DIRECTIVE": "ALWAYS investigate root causes systematically. Before fixing any issue: 1) Ask 'WHY is this happening?' not 'HOW do I fix this symptom?' 2) Trace the problem to its fundamental source 3) Fix the root cause, not symptoms 4) Verify the fix addresses the underlying issue. NEVER declare victory after fixing surface-level symptoms."
  },
  "permissions": {
    "allow": [
      "Bash(pkill:*)",
      "Bash(echo:*)",
      "Bash(pyenv which:*)",
      "Bash(pyenv:*)",
      "Bash(exec zsh)",
      "Bash(source:*)",
      "Bash(env:*)",
      "Bash(zsh:*)",
      "Bash(/bin/zsh)",
      "Bash(readlink:*)",
      "Bash(exec:*)",
      "Bash(/bin/zsh -n /Users/dheerajchand/.zshrc)",
      "Bash(/Users/dheerajchand/.config/zsh/zsh-system status)",
      "Bash(chmod:*)",
      "Bash(./test-phase-recovery.zsh:*)",
      "Bash(typeset:*)",
      "Bash(awk:*)",
      "Bash(git rm:*)",
      "Bash(find:*)",
      "Read(//Users/dheerajchand/**)",
      "Bash(timeout:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(/bin/zsh -i)",
      "Bash(ls:*)",
      "Bash(~/.config/zsh/zsh-system status)",
      "Bash(load-python)",
      "Bash(python_status)",
      "Bash(ps:*)",
      "Bash(ZSH_CONFIG_DIR=\"$HOME/.config/zsh\")",
      "Bash(fake_parent=\"warp\")",
      "Bash(if [[ \"$fake_parent\" == \"claude\" ]])",
      "Bash([[ -n \"$CLAUDE_CODE_SESSION\" ]])",
      "Bash(then echo \"🤖 Claude Code - would load modules\")",
      "Bash(else echo \"🖥️  Regular terminal - would load modules\")",
      "Bash(fi)",
      "Bash(./zsh-system service status:*)",
      "Bash(./zsh-system service start:*)",
      "Bash(./zsh-system service stop path-optimizer)",
      "Bash(git commit:*)",
      "Bash(grep:*)",
      "Bash(backup \"docs: update README to reflect completed Phase 1-3 architecture\")",
      "Bash(backup \"docs: update CLAUDE.md to reflect production-ready status\")",
      "Bash(zshreload:*)",
      "Bash(backup:*)",
      "Bash(alias backup)",
      "Bash(./test-production-system.zsh:*)",
      "Bash(enhanced_backup:*)",
      "Bash(export LOADED_MODULES=\"utils\")",
      "Bash(export LOADED_MODULES=\"utils python\")",
      "Bash([[ -n \"$LOADED_MODULES\" ]])",
      "Bash(git checkout:*)",
      "Bash(startup_status)",
      "Bash(load_module utils)",
      "Bash(load_module python)",
      "Bash(load_module docker)",
      "Bash(docker:*)",
      "Bash(load_module spark)",
      "Bash(command -v:*)",
      "Bash(~/.config/zsh/test-real-world-integration.zsh)",
      "Bash(python3:*)",
      "Bash(~/.config/zsh/fix-critical-failures.sh:*)",
      "Bash(~/.config/zsh/hostile-test-framework.sh)",
      "Bash(bash:*)",
      "Bash(~/.config/zsh/fix-subshell-isolation.sh:*)",
      "Bash(~/.config/zsh/final-verification-test.sh)",
      "Bash(/tmp/test_pushmain.sh:*)",
      "Bash(/tmp/debug_pushmain.sh:*)",
      "Bash(/tmp/test_claude_detection.sh:*)",
      "Bash(/tmp/debug_claude_detection.sh:*)",
      "Bash(/tmp/debug_process_tree.sh:*)",
      "Bash(mkcd:*)",
      "Bash(/bin/zsh:*)",
      "Bash(printenv)",
      "Bash(export CLAUDE_CODE_SESSION=test)",
      "Bash(/dev/null)",
      "Bash(/bin/date)",
      "Bash(export:*)",
      "Bash(git --version)",
      "Bash(kill:*)",
      "Bash(deduplicate_path)",
      "Read(//bin/**)",
      "Read(//private/etc/**)",
      "Bash(whereis:*)",
      "Bash(cat:*)",
      "Bash(xattr:*)",
      "Bash(unset:*)",
      "Bash(hash:*)",
      "Bash(export TERM_PROGRAM=\"iTerm.app\")",
      "Bash(command:*)",
      "Bash(export CLAUDE_CODE_SESSION=\"test\")",
      "Bash(/usr/bin/wc -l ~/.zshrc)",
      "Bash(yes)",
      "Bash(detect_claude_environment)",
      "Bash(~/.config/zsh/zsh-system service list)",
      "Bash(~/.config/zsh/zsh-system service stop path-optimizer)",
      "Bash(~/.config/zsh/zsh-system service stop environment-setup)",
      "Bash(xargs kill:*)",
      "Bash(~/.config/zsh/zsh-system switch-minimal)",
      "Bash(extract:*)",
      "Bash(PATH=\"/usr/bin:/bin\" command_exists rg)",
      "Bash(command_exists \"\")",
      "Bash(command_exists:*)",
      "Bash(is_online)",
      "Bash(ZSH_MODE=light zsh -c 'source ~/.zshrc 2>&1')",
      "Bash(container=docker zsh -c 'source ~/.zshrc 2>&1')",
      "Bash(TERM_PROGRAM=docker zsh -c 'source ~/.zshrc 2>&1')",
      "Bash(./hostile-test-framework.sh)",
      "Bash(open:*)",
      "Bash(pstree:*)",
      "Bash(/tmp/environment_comparison.sh:*)",
      "Bash(./battle-test-framework.sh:*)",
      "WebSearch",
      "Bash(./big-data-reality-test.sh:*)",
      "Bash(java:*)",
      "Bash(if [[ -n \"$SDKMAN_DIR\" ]])",
      "Bash([[ -f \"$SDKMAN_DIR/bin/sdkman-init.sh\" ]])",
      "Bash(then echo \"✅ SDKMAN init conditions met\")",
      "Bash(else echo \"❌ SDKMAN init conditions NOT met\")",
      "Bash(sdk list:*)",
      "Bash(git log:*)",
      "Bash(time zsh:*)",
      "Bash(./honest-testing-framework.sh:*)",
      "Bash(lsof:*)",
      "Bash(ping:*)",
      "Bash(sudo tee:*)",
      "Bash(ssh:*)",
      "Bash(pgrep:*)",
      "Bash(xargs:*)",
      "Bash(./test-portability.zsh:*)",
      "Bash(./test-portability-clean.zsh:*)",
      "Bash(test_terminal_compatibility)",
      "Bash(/Users/dheerajchand/.config/zsh/pycharm_fix.sh:*)",
      "Bash(py-uv)",
      "Bash(py-switch list:*)",
      "Bash(py-info)",
      "Bash(python_info)",
      "Bash(python_help)",
      "Bash(pyhelp:*)",
      "Bash(load-spark)",
      "Bash(declare -f)",
      "Bash(uv:*)",
      "Bash(pyspark:*)",
      "Bash(spark-submit:*)",
      "Bash(declare:*)",
      "Bash(spark_shell:*)",
      "Bash(pyspark_shell:*)",
      "Read(//opt/homebrew/Cellar/pyenv/2.6.7/completions/**)",
      "Bash(sudo mv:*)",
      "Read(//usr/lib/zsh/5.9/zsh/**)",
      "Bash(./hostile-pyenv-p10k-tests.zsh)",
      "Bash(./simple-hostile-verification.zsh:*)",
      "Read(//Applications/**)",
      "Bash(printenv:*)",
      "Bash([[ -d \"$PYENV_ROOT/bin\" ]])",
      "Read(//Users/**)",
      "Bash([[ -d \"$HOME/Library/Application Support/JetBrains/Toolbox\" ]])",
      "Bash(mdfind:*)",
      "Bash(jetbrains_status:*)",
      "Bash(dataspell:*)",
      "Bash(/usr/bin/tr:*)",
      "Bash(/usr/bin/grep jetbrains)",
      "Bash($HOME/.jetbrains/bin/dataspell --help)",
      "Bash([[ -d \"$HOME/.jetbrains/bin\" ]])",
      "Bash(load-docker)",
      "Bash(~/.config/zsh/final-hostile-verification.zsh)",
      "Bash(git revert:*)",
      "Bash(./final-hostile-verification.zsh)",
      "Bash(TERM_PROGRAM=\"PyCharm\" ENABLE_P10K_INSTANT_PROMPT=\"true\" zsh -c 'source /Users/dheerajchand/.config/zsh/zshrc >/dev/null 2>&1; echo \"\"POWERLEVEL9K_INSTANT_PROMPT: $POWERLEVEL9K_INSTANT_PROMPT\"\"')",
      "Bash(\"/Applications/MuseScore 4.app/Contents/MacOS/mscore\" --version)",
      "Bash(log show:*)",
      "Bash(brew list:*)",
      "Bash(brew info:*)",
      "Bash(brew:*)",
      "Bash(security)",
      "Bash(credential_backend_status)",
      "Bash(test_credential_system)",
      "Bash(get_credential:*)",
      "Bash(op:*)",
      "Bash(ga_list_credentials)",
      "Bash(ga_get_service_account)",
      "Bash(./hostile-credential-testing.zsh)",
      "Bash(./simple-credential-test.zsh)",
      "Bash(security find-generic-password:*)",
      "Bash(set +o)",
      "Bash(./debug-trace.zsh:*)",
      "Bash(./function-debug.zsh)",
      "Bash(time git status)",
      "Bash(time lsof:*)",
      "Bash(~/.config/zsh/zsh-system service status)",
      "Bash(~/.config/zsh/zsh-system service status path-optimizer)",
      "Bash(~/.config/zsh/zsh-system service status environment-setup)",
      "Bash(time:*)",
      "Bash(top:*)",
      "Bash(git config:*)",
      "Read(//opt/homebrew/Cellar/pyenv/2.6.8/completions/**)",
      "Read(//opt/homebrew/Cellar/pyenv/2.6.8/**)",
      "Read(//opt/homebrew/**)",
      "WebFetch(domain:github.com)",
      "Bash(zmodload:*)",
      "Bash(autoload -U compctl)"
    ],
    "deny": [],
    "ask": []
  },
  "defaultMode": "bypassPermissions"
}