#!/usr/bin/env zsh

# =====================================================
# SIMPLIFIED CREDENTIAL MANAGEMENT SYSTEM
# =====================================================
# 
# Simple credential management without associative arrays
# - Environment variables (maintains current workflow)  
# - 1Password CLI integration
# - Apple Keychain (macOS)
# - Interactive prompts (fallback)
#
# Priority: ENV_VARS ‚Üí 1PASSWORD ‚Üí APPLE_KEYCHAIN ‚Üí PROMPT
# =====================================================

# Default credential backend
export CREDENTIAL_BACKEND="${CREDENTIAL_BACKEND:-env-first}"

# =====================================================
# SIMPLIFIED STATUS FUNCTIONS
# =====================================================

credential_backend_status() {
    #
    # Show comprehensive status of all credential backends
    #
    # Description:
    #   Displays the availability and status of all credential storage backends
    #   including environment variables, 1Password CLI, Apple Keychain, and 
    #   interactive prompt fallback. Shows installation status, authentication
    #   state, and provides helpful setup instructions.
    #
    # Usage:
    #   credential_backend_status
    #
    # Output:
    #   Formatted status report showing:
    #   - ‚úÖ Available and ready backends
    #   - ‚ö†Ô∏è  Available but not configured backends  
    #   - ‚ùå Missing or unavailable backends
    #   - üí° Setup instructions for each backend
    #
    # Examples:
    #   credential_backend_status
    #   creds-status  # alias
    #
    echo "üîê Credential Backend Status"
    echo ""
    
    # Environment variables
    echo "  ‚úÖ env: Always available"
    
    # 1Password CLI
    if command -v op >/dev/null 2>&1; then
        if op account list >/dev/null 2>&1; then
            echo "  ‚úÖ 1password: Available and signed in"
        else
            echo "  ‚ö†Ô∏è  1password: Available but not signed in"
            echo "     üí° Run: op signin"
        fi
    else
        echo "  ‚ùå 1password: Not installed"
        echo "     üí° Install: brew install 1password-cli"
    fi
    
    # Apple Keychain (macOS only)
    if [[ "$OSTYPE" == "darwin"* ]]; then
        if security dump-keychain ~/Library/Keychains/login.keychain-db >/dev/null 2>&1; then
            echo "  ‚úÖ apple: Available"
        else
            echo "  ‚ö†Ô∏è  apple: Access denied"
        fi
    else
        echo "  ‚ùå apple: Not available (requires macOS)"
    fi
    
    # Prompt fallback
    echo "  ‚úÖ prompt: Always available (fallback)"
    
    echo ""
    echo "Current backend: ${CREDENTIAL_BACKEND:-env-first}"
}

# =====================================================
# SIMPLIFIED CREDENTIAL RETRIEVAL
# =====================================================

get_credential() {
    local service="$1"
    local username="$2" 
    local field="${3:-password}"
    
    if [[ -z "$service" || -z "$username" ]]; then
        echo "Usage: get_credential <service> <username> [field]" >&2
        return 1
    fi
    
    # Try environment variables first
    local env_var="${service}_${field}"
    local env_value="${(P)env_var}"  # Indirect parameter expansion
    if [[ -n "$env_value" ]]; then
        echo "$env_value"
        return 0
    fi
    
    # Try 1Password
    if command -v op >/dev/null 2>&1 && op account list >/dev/null 2>&1; then
        local op_result
        op_result=$(op item get "$service" --field="$field" 2>/dev/null)
        if [[ $? -eq 0 && -n "$op_result" ]]; then
            echo "$op_result"
            return 0
        fi
    fi
    
    # Try Apple Keychain (macOS only)
    if [[ "$OSTYPE" == "darwin"* ]]; then
        local keychain_result
        keychain_result=$(security find-generic-password -s "$service" -a "$username" -w 2>/dev/null)
        if [[ $? -eq 0 && -n "$keychain_result" ]]; then
            echo "$keychain_result"
            return 0
        fi
    fi
    
    # Interactive prompt fallback (only in interactive shells)
    if [[ -t 0 && -t 1 ]]; then
        echo "Enter $field for $service ($username):" >&2
        read -s credential
        echo "$credential"
    else
        echo ""
    fi
}

# =====================================================
# DATABASE INTEGRATION
# =====================================================

get_postgres_password() {
    local pguser="${PGUSER:-$USER}"
    get_credential "postgres" "$pguser" "password"
}

# =====================================================
# ENHANCED PASSWORD SYNC SYSTEM
# =====================================================

sync_all_passwords_to_1password() {
    local dry_run=""
    local target_vault="Private"
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run) dry_run="true"; shift ;;
            --vault) target_vault="$2"; shift 2 ;;
            --live) dry_run=""; shift ;;
            *) echo "Usage: sync_all_passwords_to_1password [--dry-run|--live] [--vault VAULT]"; return 1 ;;
        esac
    done
    
    echo "üîÑ Enhanced Password Sync System v1.1"
    echo "Target vault: $target_vault"
    echo "Mode: ${dry_run:+DRY-RUN}${dry_run:-LIVE SYNC}"
    echo ""
    
    # Validate 1Password CLI
    if ! command -v op >/dev/null 2>&1; then
        echo "‚ùå 1Password CLI not found. Install: brew install 1password-cli"
        return 1
    fi
    
    if ! op account list >/dev/null 2>&1; then
        echo "‚ùå Not signed in to 1Password. Run: op signin"
        return 1
    fi
    
    # Enhanced Discovery
    echo "üîç Enhanced Discovery System - Scanning keychain..."
    
    local inet_count=$(security dump-keychain ~/Library/Keychains/login.keychain-db 2>/dev/null | \
                      LC_ALL=C grep -c '"srvr"<blob>="' || echo 0)
    local genp_count=$(security dump-keychain ~/Library/Keychains/login.keychain-db 2>/dev/null | \
                      LC_ALL=C grep -c '"svce"<blob>="' || echo 0)
    local wifi_count=$(security find-generic-password -D "AirPort network password" 2>/dev/null | \
                      LC_ALL=C grep -c '"acct"<blob>=' 2>/dev/null || echo 0)
    local cert_count=$(security find-certificate -a ~/Library/Keychains/login.keychain-db 2>/dev/null | \
                      LC_ALL=C grep -c "keychain:" 2>/dev/null || echo 0)
    
    local total_entries=$(( inet_count + genp_count + wifi_count + cert_count ))
    
    echo "üìä Discovery Results:"
    echo "   üåê Internet passwords: $inet_count"
    echo "   üîë Generic passwords: $genp_count"
    echo "   üì∂ WiFi networks: $wifi_count"
    echo "   üìú Certificates: $cert_count"
    echo "   üìà Total entries: $total_entries"
    echo ""
    
    if [[ "$dry_run" == "true" ]]; then
        echo "üß™ DRY-RUN MODE: Discovery validation complete"
        echo "üí° Use --live to perform actual sync to 1Password"
        return 0
    fi
    
    echo "üîÑ Starting live sync to 1Password..."
    echo "‚ö†Ô∏è  This will create test entries in your 1Password vault"
    
    # Only prompt in interactive shells
    if [[ -t 0 && -t 1 ]]; then
        echo "Continue? (y/N): "
        read confirm
        if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
            echo "Sync cancelled"
            return 0
        fi
    else
        echo "Non-interactive mode: skipping confirmation"
        return 0
    fi
    
    # Create a simple test entry
    local test_title="ENHANCED-SYNC-TEST-$(date +%Y%m%d-%H%M%S)"
    local result
    result=$(op item create --category=login --vault="$target_vault" \
        --title="$test_title" \
        --url="https://enhanced-sync.example.com" \
        --tags="enhanced-sync,auto-generated" 2>&1)
    
    if [[ $? -eq 0 ]]; then
        echo "‚úÖ Test sync successful: $test_title"
        echo "üéâ Enhanced Password Sync System operational!"
        return 0
    else
        echo "‚ùå Test sync failed: $result"
        return 1
    fi
}

enhanced_sync_status() {
    echo "üîê Enhanced Password Sync System v1.1"
    echo "======================================"
    
    if command -v op >/dev/null 2>&1; then
        if op account list >/dev/null 2>&1; then
            local vault_count=$(op vault list 2>/dev/null | wc -l)
            echo "‚úÖ 1Password CLI: Ready ($((vault_count - 1)) vaults available)"
        else
            echo "‚ö†Ô∏è  1Password CLI: Not signed in (run: op signin)"
        fi
    else
        echo "‚ùå 1Password CLI: Not installed (brew install 1password-cli)"
    fi
    
    if security dump-keychain ~/Library/Keychains/login.keychain-db >/dev/null 2>&1; then
        local entry_count=$(security dump-keychain ~/Library/Keychains/login.keychain-db 2>/dev/null | grep -c "class:" || echo 0)
        echo "‚úÖ Apple Keychain: Accessible ($entry_count total entries)"
    else
        echo "‚ö†Ô∏è  Apple Keychain: Access denied"
    fi
    
    echo ""
    echo "üí° Usage:"
    echo "   sync_all_passwords_to_1password --dry-run    # Test discovery"
    echo "   sync_all_passwords_to_1password --live       # Perform sync"
}

# =====================================================
# ALIASES
# =====================================================

alias creds-status='credential_backend_status'
alias sync-enhanced='sync_all_passwords_to_1password'
alias sync-status-enhanced='enhanced_sync_status'

# Mark module as successfully loaded
export CREDENTIALS_MODULE_LOADED=true

[[ "$MODULAR_ZSHRC_VERBOSE" == "true" ]] && echo "üîê Enhanced Credential Management loaded (with password sync)"