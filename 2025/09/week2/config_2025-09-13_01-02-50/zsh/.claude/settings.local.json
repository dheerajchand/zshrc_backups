{
  "permissions": {
    "allow": [
      "Bash(git checkout:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Read(//Users/dheerajchand/.jetbrains/bin/**)",
      "Bash(source:*)",
      "Bash(creds-status)",
      "Bash(credential_backend_status)",
      "Bash(database_status)",
      "Bash(MODULAR_ZSHRC_VERBOSE=true zsh -c 'source zshrc.new && modular_zsh_status')",
      "Bash(zsh-status)",
      "Bash(modular_zsh_status)",
      "Bash(MODULAR_ZSHRC_VERBOSE=true zsh -c 'source ~/.config/zsh/zshrc')",
      "Bash(zsh:*)",
      "Bash(MODULAR_ZSHRC_VERBOSE=true source zshrc)",
      "Bash(environment_info)",
      "Bash(env-info)",
      "Bash(echo $ZSH_PLATFORM)",
      "Bash(docker_status:*)",
      "Bash(dstatus)",
      "Bash(MODULAR_ZSHRC_VERBOSE=true zsh -c 'source ~/.config/zsh/zshrc 2>&1')",
      "Bash(chmod:*)",
      "Bash(./test-cross-platform.sh:*)",
      "Bash(bash:*)",
      "Bash(/dev/null)",
      "Bash(echo $MODULAR_ZSHRC_LOADED)",
      "Bash(MODULAR_ZSHRC_VERBOSE=true source /Users/dheerajchand/.config/zsh/zshrc)",
      "Bash(echo:*)",
      "Bash(MODULAR_ZSHRC_VERBOSE=true exec zsh)",
      "Read(//Users/dheerajchand/**)",
      "Bash(MODULAR_ZSHRC_VERBOSE=true source ~/.config/zsh/zshrc)",
      "Bash(MODULAR_ZSHRC_VERBOSE=true zsh -c 'source ~/.config/zsh/zshrc && echo \"\"=== Testing help system ===\"\" && zsh_help modules')",
      "Bash(uv:*)",
      "Bash(smart_spark_submit:*)",
      "Bash(sdk list:*)",
      "Bash(java:*)",
      "Bash(scala -version)",
      "Bash(py-info)",
      "Bash(python_info)",
      "Bash(./test-cross-platform-enhanced.sh:*)",
      "Bash(open_project:*)",
      "Bash(py:*)",
      "Bash(open:*)",
      "Read(//Applications/**)",
      "WebFetch(domain:www.siegeanalytics.com)",
      "Bash(~/Applications/PyCharm.app/Contents/MacOS/pycharm /Users/dheerajchand/.config/zsh)",
      "Bash(export:*)",
      "Bash(zed:*)",
      "Bash(make:*)",
      "Bash(curl:*)",
      "Bash(sips:*)",
      "Bash(git push:*)",
      "Bash(MODULAR_ZSHRC_VERBOSE=true zsh -c 'source ~/.config/zsh/zshrc && modular_zsh_status')",
      "Bash(MODULAR_ZSHRC_VERBOSE=true zsh -c 'source ~/.config/zsh/zshrc && environment_info')",
      "Bash(MODULAR_ZSHRC_VERBOSE=true zsh -c 'source ~/.config/zsh/zshrc && credential_backend_status')",
      "Bash(timeout:*)",
      "Bash(time:*)",
      "Bash(./test-modular-quick.sh:*)",
      "Read(//private/tmp/**)",
      "Bash(grep:*)",
      "Bash(./debug-auto-commit.sh:*)",
      "Bash(for dir in ~/Documents/Professional/*/)",
      "Bash(do)",
      "Bash(if [[ -d \"$dir/.git\" ]])",
      "Bash(then)",
      "Bash(fi)",
      "Bash(done)",
      "Bash(find:*)",
      "Bash(add-zsh-hook:*)",
      "Bash(backup_status)",
      "Bash(backup_auto_off)",
      "Bash(gh pr create:*)",
      "Bash(MODULAR_ZSHRC_VERBOSE=true source /Users/dheerajchand/.config/zsh/utilities.zsh)",
      "Bash(backup-status)",
      "Bash(command -v:*)",
      "Bash(gh pr merge:*)",
      "Bash(git stash:*)",
      "Bash(exec zsh)",
      "Bash(backup_auto_on)",
      "Bash(mkcd:*)",
      "Bash(is_online)",
      "Bash(command_exists git)",
      "Bash(tree:*)",
      "Bash(sync_all_passwords_to_1password:*)",
      "Bash(MODULAR_ZSHRC_VERBOSE=true source ~/.config/zsh/config/credentials.zsh)",
      "Bash(sync_status)",
      "Bash(sync-all-to-1p:*)",
      "Bash(test-enhanced-sync:*)",
      "Bash(op:*)",
      "Bash(test_minimal_sync:*)",
      "Bash(test_simple_sync:*)",
      "Bash(sed:*)",
      "Bash(sync_system_status)",
      "Bash(master_status)",
      "Bash(spark_status)",
      "Bash(jetbrains_status:*)",
      "Bash(pg_test_connection:*)",
      "Bash(detect_credential_backends)",
      "Bash(typeset:*)",
      "Bash(declare -A test_array)",
      "Bash(test_array[key]=\"value\")",
      "Bash(unset CREDENTIAL_BACKEND_CACHE)",
      "Bash(CREDENTIAL_BACKEND_CACHE[env]=\"true\")",
      "Bash(hadoop_status:*)",
      "Bash(declare:*)",
      "Bash(unset:*)",
      "Bash(git reset:*)",
      "Bash(sync-enhanced:*)",
      "Bash(enhanced_sync_status)",
      "Bash(comprehensive_1password_to_apple_sync)",
      "Bash(for:*)",
      "Bash(do echo \"=== Testing $file ===\")",
      "Bash(spark_start:*)",
      "Bash(MODULAR_ZSHRC_VERBOSE=true zsh -c 'source ~/.config/zsh/zshrc && echo \"\"=== Testing enhanced function availability ===\"\" && command -v sync_all_passwords_to_1password && echo \"\"✅ sync_all_passwords_to_1password available\"\" || echo \"\"❌ sync_all_passwords_to_1password not available\"\"')",
      "Bash(MODULAR_ZSHRC_VERBOSE=true zsh -c 'source ~/.config/zsh/zshrc && echo \"\"=== MODULE LOADING TEST ===\"\" && modular_zsh_status')",
      "Bash(spark_test_simple:*)",
      "Bash(test_spark_comprehensive)",
      "Bash(unalias:*)",
      "Read(//usr/lib/zsh/5.9/**)",
      "Bash(zmodload:*)",
      "Bash(MODULAR_ZSHRC_VERBOSE=true zsh -c 'source ~/.config/zsh/zshrc && echo \"\"=== Function definition check ===\"\" && type spark_test_simple')",
      "Bash(MODULAR_ZSHRC_VERBOSE=true zsh -c 'source ~/.config/zsh/config/spark.zsh && echo \"\"=== Direct spark module load ===\"\" && type spark_test_simple')",
      "Bash(MODULAR_ZSHRC_VERBOSE=true zsh -c 'source ~/.config/zsh/zshrc >/dev/null 2>&1 && whence -v spark_test_simple')",
      "Bash(head:*)",
      "Bash(MODULAR_ZSHRC_VERBOSE=true zsh -c 'source ~/.config/zsh/zshrc 2>&1 | grep -E \"\"(spark|Loaded)\"\" && echo \"\"=== Testing function ===\"\" && type spark_test_simple')",
      "Bash(MODULAR_ZSHRC_VERBOSE=true zsh -c 'ZSH_CONFIG_MODULES=\"\"$HOME/.config/zsh/config\"\"; source \"\"$ZSH_CONFIG_MODULES/spark.zsh\"\" && echo \"\"=== Direct load successful ===\"\" && type spark_test_simple')",
      "Bash(MODULAR_ZSHRC_VERBOSE=true zsh -c 'source ~/.config/zsh/zshrc && echo \"\"=== Testing function ===\"\" && spark_test_simple')",
      "Bash(./test-bash-integration.sh:*)",
      "Read(//opt/homebrew/bin/**)",
      "Bash(repo_paths)",
      "Bash(repo_status)",
      "Bash(repo_paths active)",
      "Bash(./sync-repos.sh:*)",
      "Bash(MODULAR_ZSHRC_VERBOSE=false source ~/.config/zsh/zshrc)",
      "Bash(env)",
      "Bash(deduplicate_path)",
      "Bash(enhanced_backup:*)"
    ],
    "deny": [],
    "ask": []
  }
}